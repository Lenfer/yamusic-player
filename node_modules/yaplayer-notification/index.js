'use strict';

var BrowserWindow = require('browser-window');
var electronScreen = require('screen');
var ipc = require('ipc');


// Get main display size
var displaySize = electronScreen.getPrimaryDisplay().size;

var notiferHeight = 90;

// Create notification window
var notifer = new BrowserWindow({
	width: displaySize.width,
	height: notiferHeight,
	x: 0,
	y: -notiferHeight,
	transparent: true,
	frame: false,
	'always-on-top': true,
	show: false,
	// resizable: false,
	'skip-taskbar': true,
	type: 'splash'

});

// Cancel closed notifer
notifer.on('close', function(e) {
	// e.preventDefault();
});

notifer.loadUrl('file://' + __dirname + '/page/notifer.html');

notifer.webContents.on('did-finish-load', function() {
	var intId;
	ipc.on('api:emitter:track', function(e, track) {
		clearTimeout(intId);
		notifer.webContents.send('yaplayer:notification:show', track);
		animation.show(function() {
			intId = setTimeout(function() {
				notifer.webContents.send('yaplayer:notification:hide');
				animation.hide();
			}, 3000);
		});
	});
});



// @todo: refactor this shit

var animation = {

	timer: null,

	show: function(next) {
		var timer = this.timer;
		clearInterval(timer);
		notifer.showInactive();
		var bounds = notifer.getBounds();
		timer = setInterval(function() {
			if (bounds.y < 0) {
				bounds.y += 10;
				notifer.setBounds(bounds);
			} else {
				console.log('[notifer] clear interval');
				clearInterval(timer);
				next && next();
			}
		}, 10);
	},

	hide: function(next) {
		var timer = this.timer;
		clearInterval(timer);
		var bounds = notifer.getBounds();
		timer = setInterval(function() {
			if (bounds.y > -notiferHeight) {
				bounds.y -= 10;
				notifer.setBounds(bounds);
			} else {
				clearInterval(timer);
				// notifer.hide();
				console.log('[notifer] clear and hide');
				next && next();
			}
		}, 10);
	}
};





animation.show();